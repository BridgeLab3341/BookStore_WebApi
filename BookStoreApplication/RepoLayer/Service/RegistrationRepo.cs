using CommonLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json.Linq;
using RepoLayer.Context;
using RepoLayer.Context.Models;
using RepoLayer.Interface;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace RepoLayer.Service
{
    //Summary 
    //RegistrationRepo class contains Registration of Admin and Customer Account for the bookstoreApplication
    //Constructor is Implemented with parameters and Dependencies are added from Configuration and DbBookContext file.
    //
    public class RegistrationRepo : IRegistrationRepo
    {
        private readonly IConfiguration _configuration;
        private readonly dbBooksContext _booksContext;
        public RegistrationRepo(IConfiguration configuration, dbBooksContext booksContext)
        {
            this._configuration = configuration;
            this._booksContext = booksContext;
        }
        //Summary
        //Implemented Registration for Admin and Customer to Create the BookStore Application.
        //By Using Registration Table and Model class we are adding and Saving the data into database
        //Implemented Exception handling By using Try Catch and Implemented asyn and Task.
        public async Task<RegistrationTable> Registration(RegistrationModel model)
        {
            try
            {
                RegistrationTable registration = new RegistrationTable();  //creating instance of Registration Table
                registration.TypeofRegister = model.TypeOfRegistration;
                registration.FirstName = model.FirstName;
                registration.LastName = model.LastName;
                registration.PhoneNumber = model.PhoneNumber;
                registration.Email = model.Email;
                registration.Password = model.Password;
                await _booksContext.AddAsync(registration);         //Adding data into dbcontext to database
                await _booksContext.SaveChangesAsync();             //save the data after adding to database
                if (registration != null)
                {
                    return registration;
                }
                return null;
            }
            catch (Exception)
            {
                throw new Exception("Registration failed");
            }
        }
        //Summary
        //Implemented Login for Admin and Customer to login into BookStore Application.
        //Login is done by using email, password and Type of Registration person like Admin or Customer.  
        //Implemented to Generate JWT token while login and used for authorization.
        //Implemented Exception handling By using Try Catch and Implemented asyn and Task.
        public async Task<LoginData> Login(Login login)
        {
            try
            {
                RegistrationTable registration = new RegistrationTable();
                registration = await _booksContext.RegistrationTable.FirstOrDefaultAsync(x => x.Email == login.Email && x.Password == login.Password && x.TypeofRegister == login.TypeOfRegister); //Finding the Email, Password and Type of Registation from input
                var email = login.Email;
                var typeOfRegister = login.TypeOfRegister;
                if (registration != null)
                {
                    var token = GenerateJwtToken(registration.RegisterId, registration.Email, registration.TypeofRegister); //Generation token according to these fields
                    LoginData loginData = new LoginData  //Creaing the instance of object to the login data model class 
                    {
                        Token = token,
                        Register = registration,
                        TypeOfRegister = registration.TypeofRegister,
                    };
                    return loginData;   //Printing or returning the data and token in console.
                }
                else
                {
                    return null;
                }

            }
            catch (Exception)
            {
                throw new Exception("Login Failed");
            }
        }
        //Summary
        //Implemented to Generate JWT token while login and used for Authentication and authorization.
        //Implemented jwt token to be Generated by using the id,email and typeOf register.
        //Claiming the Email,RegistrationId and Type of register.
        //Token Expiry date is implemented.
        //Printing the Token on console.
        public string GenerateJwtToken(long id, string email, string typeOfRegister)
        {
            var tokenHandler = new JwtSecurityTokenHandler(); //Initialize TokenHandler and Get Secret Key
                                                              //The JwtSecurityTokenHandler is part of the System.IdentityModel.Tokens.Jwt namespace and is used to create and validate JWTs.
            var key = Encoding.ASCII.GetBytes(_configuration["JwtConfig:Secret"]); //The key is used to sign the JWT to ensure its integrity.

            var tokenDscrption = new SecurityTokenDescriptor //SecurityTokenDescriptor is used to specify the details of the JWT to be created
            {
                Subject = new ClaimsIdentity(new[]  //It defines the claims (information about the user) as a collection of ClaimsIdentity.
                {
                    new Claim(ClaimTypes.Email, email),
                    new Claim("RegistrationId", id.ToString()),
                    new Claim("TypeofRegister",typeOfRegister.ToString())
                }),
                Expires = DateTime.UtcNow.AddMinutes(60),     //It sets the expiration time of the token to 60 minutes from the current UTC time.
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)  //It specifies the signing credentials using the provided secret key and the HMAC SHA-256 signature algorithm.
            };
            var token = tokenHandler.CreateToken(tokenDscrption);  //method is used to create a JWT based on the provided token descriptor
            return tokenHandler.WriteToken(token); //method is used to convert the JWT into its string representation and returns the final JWT
        }
        //Summary
        //Implemented forget password method by generating the jwt.
        //checking the email input given in the database and Generating the token.
        public async Task<string> ForgotPassword(string email)
        {
            try
            {
                var entity = await _booksContext.RegistrationTable.Where(x => x.Email == email).FirstOrDefaultAsync();  //Finding the the input email is present in the database or not.
                var useremail = entity.Email;
                var id = entity.RegisterId;
                string type = entity.TypeofRegister;

                if (entity != null)
                {
                    var token = GenerateJwtToken(id, email, type);   //printing the token for forget method using the input email
                    //MsmqModel msmql = new MsmqModel();
                    //msmql.SendData2Queue(token);
                    // return token;
                    return token;   //printing the token 
                }
                else
                {
                    return null;
                }
            }
            catch (Exception)
            {
                throw new Exception("Token not Generated failed");
            }
        }
        //Summary
        //Implemented Reset password using the email and password.
        //checking the email input given in the database and claiming the email.
        //confirming the password again two times.
        public async Task<bool> ResetPassword(string email, string password, string confirmPassword)
        {
            try
            {
                if (password == confirmPassword)  //condition to be equal for password and confirm password
                {
                    var reset = await _booksContext.RegistrationTable.Where(x => x.Email == email).FirstOrDefaultAsync(); //checking the email given by user
                    reset.Password = confirmPassword;
                    await _booksContext.SaveChangesAsync(); //save changes and store in the database 
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {
                throw new Exception("Reset Password failed");
            }
        }
    }
}
